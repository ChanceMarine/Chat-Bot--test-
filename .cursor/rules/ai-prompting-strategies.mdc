---
description: Effective communication techniques and prompting strategies for AI collaboration
globs: **/*
alwaysApply: true
---
# AI Prompting Strategies

## Overview

Effective techniques for AI collaboration during spec creation, including troubleshooting guidance and examples of successful interactions.

## Core Principles

### 1. Context is King

**Provide Rich Context**
- Always include relevant background about your project, technology stack, and constraints
- Reference previous discussions and decisions to maintain continuity
- Explain the "why" behind your requirements, not just the "what"

**Example - Good Context Setting:**
```
I'm working on a React e-commerce application that currently handles 10k daily users. 
We use TypeScript, Node.js backend with PostgreSQL, and deploy on AWS. 
I need to add a product recommendation feature that integrates with our existing 
user behavior tracking system and should handle our expected 50% traffic growth.
```

**Example - Poor Context:**
```
I need a recommendation system.
```

### 2. Be Specific and Concrete

**Use Concrete Examples**
- Provide specific scenarios rather than abstract descriptions
- Include actual data examples when discussing data models
- Reference real user workflows and business processes

**Example - Specific Request:**
```
For the user authentication system, I need to handle these specific scenarios:
1. New user registration with email verification
2. Social login via Google and GitHub OAuth
3. Password reset with secure token expiration (24 hours)
4. Account lockout after 5 failed attempts with 30-minute cooldown
5. Integration with our existing user profile system that stores preferences
```

### 3. Structure Complex Requests

**Break Down Large Asks**
- Divide complex features into logical phases
- Prioritize core functionality over nice-to-have features
- Sequence requests to build understanding progressively

**Example - Well-Structured Request:**
```
I want to create a comprehensive spec for a file upload system. Let's start with:

Phase 1: Core upload functionality
- Single file upload with progress tracking
- File type validation (images, documents)
- Size limits (10MB max)

Phase 2: Enhanced features (we'll tackle after Phase 1 is solid)
- Multiple file upload
- Drag-and-drop interface
- Cloud storage integration
```

## Phase-Specific Best Practices

### Requirements Phase

**Do:**
- Start with user problems, not technical solutions
- Use the "As a [role], I want [goal], so that [benefit]" format consistently
- Include both happy path and error scenarios
- Specify measurable acceptance criteria

**Don't:**
- Jump into implementation details
- Assume the AI knows your business context
- Create requirements that are too broad or vague
- Skip edge cases and error handling

**Successful Interaction Example:**
```
User: "I need user authentication for my app."

Better approach: "I'm building a SaaS application for small businesses. 
Users need to register with email/password and also sign in with Google. 
The system should handle password resets and account lockouts after failed attempts. 
We need to integrate with our existing user management system that stores user profiles."
```

### Design Phase

**Do:**
- Reference specific requirements when discussing design decisions
- Ask for multiple architectural approaches when appropriate
- Include performance and scalability requirements
- Consider security implications explicitly

**Don't:**
- Ask for design without clear requirements
- Ignore existing system constraints
- Focus only on happy path scenarios
- Skip error handling and edge cases

**Successful Interaction Example:**
```
"Based on our authentication requirements, I need to design the system architecture. 
We expect 10k concurrent users and need 99.9% uptime. 
Security is critical since we handle sensitive business data. 
What are the trade-offs between JWT tokens vs session-based authentication for our use case?"
```

### Tasks Phase

**Do:**
- Reference specific design components when creating tasks
- Ask for task dependencies and sequencing
- Include testing considerations for each task
- Specify clear deliverables

**Don't:**
- Create tasks without clear design context
- Ignore task dependencies and order
- Skip testing and validation steps
- Make tasks too broad or too narrow

**Successful Interaction Example:**
```
"Now that we have the authentication design approved, please break it down into 
implementation tasks. Each task should be completable in 2-4 hours and include 
unit tests. Focus on the core authentication flow first, then add password reset 
and social login features."
```

## Advanced Prompting Techniques

### 1. Progressive Disclosure
Start with high-level requirements, then drill down:

```
"First, let's identify the main user stories for this feature."
"Now, let's add acceptance criteria for each story."
"Finally, let's consider edge cases and error scenarios."
```

### 2. Alternative Exploration
Ask for multiple approaches:

```
"Show me two different design approaches for this feature."
"What are the trade-offs between these approaches?"
"Which approach best aligns with our requirements?"
```

### 3. Validation Prompts
Use specific validation questions:

```
"Does this requirement cover all user scenarios?"
"Are there any security considerations we missed?"
"Will this design scale with our expected growth?"
```

### 4. Iterative Refinement
Use feedback loops:

```
"Review this requirement and suggest improvements."
"Identify any gaps in this design."
"Validate that these tasks will meet all requirements."
```

## Context-Specific Prompts

### For New Features
```
"I want to build [FEATURE_NAME]. Let's start with requirements using the Kiro methodology."
```

### For Bug Fixes
```
"I need to fix [BUG_DESCRIPTION]. Let's first understand the root cause and then design a solution."
```

### For Refactoring
```
"I want to refactor [COMPONENT_NAME]. Let's analyze the current implementation and design improvements."
```

### For Performance Optimization
```
"[SYSTEM_NAME] is experiencing performance issues. Let's identify bottlenecks and design optimizations."
```

## Prompt Templates

### Requirements Phase Template
```
I want to create a spec for [FEATURE_NAME]. Here's my initial idea:

[BRIEF_FEATURE_DESCRIPTION]

Please help me create comprehensive requirements using the EARS format. Focus on:
- User stories that capture the core value proposition
- Acceptance criteria that are testable and specific
- Edge cases and error scenarios
- Integration points with existing systems

The feature should serve [TARGET_USER_TYPE] and solve [CORE_PROBLEM].

Technical constraints: [LIST_CONSTRAINTS]
Business context: [BUSINESS_CONTEXT]
```

### Design Phase Template
```
Based on the requirements we've established, I need a comprehensive design for [FEATURE_NAME].

Requirements summary: [BRIEF_RECAP_OF_KEY_REQUIREMENTS]

Please create a design that addresses:
- Overall architecture and component relationships
- Data models and their relationships
- API interfaces and contracts
- Error handling strategies
- Testing approach

Consider these technical constraints:
- Technology stack: [CURRENT_TECH_STACK]
- Performance requirements: [KEY_PERFORMANCE_NEEDS]
- Integration points: [SYSTEMS_TO_INTEGRATE_WITH]
- Security requirements: [SECURITY_NEEDS]
```

### Tasks Phase Template
```
Now that we have the design approved, please break it down into actionable coding tasks.

Design summary: [KEY_DESIGN_COMPONENTS]

Create an implementation plan that:
- Follows test-driven development principles
- Builds incrementally with early validation
- Sequences tasks to minimize dependencies
- Includes specific file/component creation steps

Each task should:
- Reference specific requirements it addresses
- Be completable by a coding agent
- Build on previous tasks
- Include testing considerations

Estimated timeline: [TIMELINE_CONSTRAINTS]
Team size: [TEAM_SIZE]
```

## Troubleshooting Common Issues

### When AI Doesn't Understand Context
**Problem**: AI gives generic responses that don't fit your project
**Solution**: Provide more specific context about your project, tech stack, and constraints

```
"Let me provide more context about our project..."
[Include specific details about your project, existing codebase, constraints]
```

### When AI Jumps to Implementation Too Early
**Problem**: AI starts coding before requirements are clear
**Solution**: Explicitly state which phase you're in and what you need

```
"Let's stay in the requirements phase for now. I need help defining clear acceptance criteria before we move to design."
```

### When AI Provides Vague Responses
**Problem**: AI gives high-level answers without specifics
**Solution**: Ask for concrete examples and specific details

```
"Can you provide a specific example of how this would work in our context?"
"Please give me the exact EARS format requirements for this feature."
```

### When AI Ignores Constraints
**Problem**: AI suggests solutions that don't fit your constraints
**Solution**: Explicitly restate constraints and ask for alternatives

```
"That approach won't work because of [CONSTRAINT]. What are alternative approaches that would work within our constraints?"
```

## Best Practices for Different Scenarios

### Complex System Design
```
"I need to design a complex system with multiple components. Let's start with:
1. High-level architecture overview
2. Component interaction patterns
3. Data flow between components
4. Integration points with external systems

Please provide multiple architectural options with pros and cons for each."
```

### Performance-Critical Features
```
"This feature needs to handle [PERFORMANCE_REQUIREMENTS]. Please consider:
- Scalability implications of design decisions
- Performance bottlenecks and mitigation strategies
- Monitoring and optimization approaches
- Load testing requirements"
```

### Security-Sensitive Features
```
"This feature handles sensitive data. Please address:
- Authentication and authorization requirements
- Data encryption and protection
- Input validation and sanitization
- Security testing requirements
- Compliance considerations"
```

### Integration with Existing Systems
```
"This feature needs to integrate with our existing [SYSTEM_NAME]. Please consider:
- API compatibility and versioning
- Data format requirements
- Error handling for integration failures
- Testing strategies for integration points"
```

## Communication Patterns

### Asking for Clarification
```
"I need to understand this better. Can you:
1. Provide a concrete example?
2. Explain the trade-offs involved?
3. Show me how this would work in practice?"
```

### Requesting Alternatives
```
"What are the alternative approaches to this design? Please include:
- Pros and cons of each approach
- Implementation complexity
- Maintenance considerations
- Performance implications"
```

### Validating Understanding
```
"Let me confirm I understand correctly:
[Summarize your understanding]

Is this accurate? What am I missing?"
```

### Providing Feedback
```
"That approach has some issues:
1. [Specific issue 1]
2. [Specific issue 2]

Can you suggest an alternative that addresses these concerns?"
```

## Continuous Improvement

### Learning from Interactions
- Note which prompts work well for your project
- Identify patterns in successful AI collaborations
- Document effective context-setting approaches
- Track common issues and their solutions

### Refining Your Approach
- Adjust prompt style based on AI responses
- Experiment with different levels of detail
- Test different structuring approaches
- Learn from both successful and failed interactions

### Building Context Over Time
- Maintain consistent terminology across sessions
- Reference previous decisions and rationale
- Build a shared understanding of your project
- Document important decisions for future reference

## Integration with Kiro Methodology

### Requirements Phase Integration
- Use prompting to explore user needs thoroughly
- Ask for edge cases and error scenarios
- Validate requirements completeness
- Ensure testable acceptance criteria

### Design Phase Integration
- Use prompting to explore architectural options
- Validate design against requirements
- Consider performance and security implications
- Plan for testing and validation

### Tasks Phase Integration
- Use prompting to break down complex tasks
- Validate task dependencies and sequencing
- Ensure comprehensive test coverage
- Plan for incremental delivery

Follow these prompting strategies to maximize the effectiveness of AI collaboration throughout the spec-driven development process.
description:
globs:
alwaysApply: false
---
