---
description: Standards for managing changes, version control, and collaborative development workflows
globs: **/*
alwaysApply: true
---
# Change Management

## Overview

Managing spec evolution and handling discovered requirements during implementation. Specs are living documents that evolve as understanding deepens. This guide covers strategies for managing changes while maintaining traceability and quality.

## Change Types

### 1. Clarification Changes
- **What**: Minor clarifications that don't affect scope
- **Examples**: Typo fixes, formatting improvements, clearer wording
- **Process**: Direct edit with commit message noting clarification

### 2. Scope Changes
- **What**: New requirements or modified existing ones
- **Examples**: Additional user stories, changed business rules
- **Process**: Full change impact assessment required

### 3. Implementation Discoveries
- **What**: Technical constraints discovered during coding
- **Examples**: API limitations, performance bottlenecks, security requirements
- **Process**: Update design phase, potentially requirements

## Change Decision Framework

```mermaid
flowchart TD
    A[Change Request] --> B{Change Type?}
    B -->|Clarification| C[Direct Edit]
    B -->|Scope Change| D[Impact Assessment]
    B -->|Implementation Discovery| E[Technical Review]
    
    D --> F{Impact > 20% effort?}
    F -->|Yes| G[Stakeholder Approval]
    F -->|No| H[Update Spec]
    
    E --> I{Affects Requirements?}
    I -->|Yes| J[Update Requirements]
    I -->|No| K[Update Design Only]
    
    G --> L[Major Version Update]
    H --> M[Minor Version Update]
    J --> N[Requirements Review]
    K --> O[Design Review]
```

## Version Control Strategy

### Semantic Versioning for Specs
- **Major (1.0.0 → 2.0.0)**: Breaking changes to requirements or core design
- **Minor (1.0.0 → 1.1.0)**: New requirements or significant design changes
- **Patch (1.0.0 → 1.0.1)**: Clarifications, bug fixes, minor updates

### Branch Strategy
```
main/
├── spec-v1.0/          # Stable spec versions
├── feature/new-req     # New requirement branches
└── fix/clarification   # Minor fix branches
```

## Change Impact Assessment

### Questions to Ask
1. **Requirements Impact**
   - Does this change existing user stories?
   - Are new acceptance criteria needed?
   - Do any requirements become obsolete?

2. **Design Impact**
   - What components are affected?
   - Are new dependencies introduced?
   - Does the architecture need revision?

3. **Implementation Impact**
   - How many tasks need updating?
   - What's the estimated effort change?
   - Are there new risks or blockers?

### Impact Scoring
- **Low (1-2 points)**: Clarifications, minor additions
- **Medium (3-5 points)**: New features, moderate design changes
- **High (6-8 points)**: Major scope changes, architecture revisions
- **Critical (9-10 points)**: Fundamental requirement changes

## Change Request Process

### 1. Change Request Submission
```markdown
## Change Request

**Type**: [Clarification/Scope Change/Implementation Discovery]
**Priority**: [High/Medium/Low]
**Impact Score**: [1-10]

### Description
[Detailed description of the change]

### Rationale
[Why this change is needed]

### Impact Assessment
- Requirements: [Impact on requirements]
- Design: [Impact on design]
- Implementation: [Impact on tasks]

### Proposed Solution
[How to implement the change]

### Alternatives Considered
[Other approaches that were considered]
```

### 2. Change Review Process
1. **Initial Review**: Assess change type and impact
2. **Technical Review**: Evaluate technical feasibility
3. **Stakeholder Review**: Get approval for significant changes
4. **Implementation Planning**: Plan how to implement the change

### 3. Change Implementation
1. **Update Specs**: Modify requirements, design, or tasks
2. **Communicate Changes**: Notify team of changes
3. **Update Implementation**: Adjust current work if needed
4. **Validate Changes**: Ensure changes meet objectives

## Managing Different Change Types

### Clarification Changes
**Process**: Direct edit with documentation
```markdown
# Example clarification change
- Original: "System shall handle user authentication"
- Clarified: "System shall handle user authentication via email/password and OAuth providers"
```

**Documentation**:
- Update spec with clearer language
- Add examples or edge cases
- Document the clarification in commit message

### Scope Changes
**Process**: Full impact assessment and approval
```markdown
# Example scope change
- Original: User can upload images
- New: User can upload images and videos with preview functionality
```

**Impact Assessment**:
- Review all affected requirements
- Update design to accommodate new scope
- Adjust task breakdown and timeline
- Get stakeholder approval for significant changes

### Implementation Discoveries
**Process**: Technical review and spec update
```markdown
# Example implementation discovery
- Discovery: API rate limits require pagination implementation
- Impact: Need to update design and add pagination tasks
```

**Technical Review**:
- Assess technical feasibility
- Update design if needed
- Add new tasks for discovered requirements
- Document technical constraints

## Change Communication

### Stakeholder Communication
- **Immediate**: Notify stakeholders of significant changes
- **Regular Updates**: Provide status updates on change implementation
- **Final Notification**: Confirm when changes are complete

### Team Communication
- **Change Announcement**: Notify team of approved changes
- **Impact Discussion**: Discuss how changes affect current work
- **Timeline Updates**: Adjust project timeline if needed

### Documentation Updates
- **Spec Updates**: Keep all spec documents current
- **Change Log**: Maintain change history
- **Decision Log**: Document change rationale

## Change Tracking and Documentation

### Change Log Template
```markdown
# Change Log

## Version 1.1.0 - 2024-01-15

### Added
- Video upload functionality (REQ-001)
- Pagination for large datasets (REQ-002)

### Changed
- Clarified authentication requirements (REQ-003)
- Updated API response format (DESIGN-001)

### Fixed
- Corrected typo in user story (REQ-004)
- Updated broken link in documentation (DOCS-001)
```

### Decision Log Template
```markdown
# Decision Log

## Decision 001: Add Video Upload Support
**Date**: 2024-01-15
**Status**: Approved
**Impact**: Medium (5 points)

### Context
Users requested ability to upload videos in addition to images.

### Decision
Add video upload functionality with preview support.

### Consequences
- Positive: Enhanced user experience
- Negative: Increased storage requirements and processing time
- Neutral: Requires additional testing for video formats
```

## Change Validation

### Validation Checklist
- [ ] **Requirements Traceability**: All changes trace back to requirements
- [ ] **Design Consistency**: Changes don't break existing design
- [ ] **Implementation Feasibility**: Changes can be implemented
- [ ] **Quality Impact**: Changes don't reduce quality
- [ ] **Timeline Impact**: Changes fit within project timeline

### Validation Process
1. **Self Review**: Author reviews change for completeness
2. **Peer Review**: Team members review change for accuracy
3. **Stakeholder Review**: Stakeholders validate business impact
4. **Technical Review**: Technical team validates feasibility

## Risk Management for Changes

### Change Risks
- **Scope Creep**: Changes expanding project scope
- **Timeline Impact**: Changes affecting project timeline
- **Quality Impact**: Changes reducing code quality
- **Team Impact**: Changes affecting team productivity

### Risk Mitigation
- **Change Control**: Strict process for approving changes
- **Impact Assessment**: Thorough evaluation of change impact
- **Stakeholder Approval**: Get approval for significant changes
- **Regular Reviews**: Periodic review of change effectiveness

## Integration with Kiro Methodology

### Requirements Phase Changes
- Update user stories and acceptance criteria
- Maintain EARS format consistency
- Ensure requirements remain testable
- Update requirements traceability matrix

### Design Phase Changes
- Update architecture and component design
- Revise data models and interfaces
- Update error handling strategies
- Maintain design consistency

### Tasks Phase Changes
- Add, modify, or remove implementation tasks
- Update task dependencies and sequencing
- Adjust task estimates and timeline
- Maintain task traceability to requirements

## Best Practices

### Do's
- Document all changes thoroughly
- Assess impact before implementing changes
- Communicate changes to all stakeholders
- Maintain change history and rationale
- Validate changes against project objectives

### Don'ts
- Make changes without impact assessment
- Ignore stakeholder feedback on changes
- Implement changes that break existing functionality
- Skip documentation of change rationale
- Make changes without team communication

## Change Management Tools

### Version Control
- Use Git for spec version control
- Create branches for major changes
- Tag stable spec versions
- Maintain change history

### Documentation Tools
- Use markdown for spec documentation
- Maintain change logs and decision logs
- Use templates for consistent documentation
- Keep documentation synchronized with code

### Communication Tools
- Use project management tools for change tracking
- Maintain communication channels for change updates
- Use templates for change requests
- Schedule regular change review meetings

## Continuous Improvement

### Learning from Changes
- Document lessons learned from change management
- Identify patterns in change requests
- Improve change assessment process
- Refine communication strategies

### Process Refinement
- Update change management process based on experience
- Improve change assessment criteria
- Enhance stakeholder communication
- Streamline change approval process

Follow this change management framework to handle spec evolution effectively while maintaining project quality and stakeholder satisfaction.
description:
globs:
alwaysApply: false
---
