---
description: Continuous improvement system for rules, patterns, and development practices
globs: **/*
alwaysApply: true
---
# Self-Improvement System

## Rule Improvement Triggers

- New code patterns not covered by existing rules
- Repeated similar implementations across files
- Common error patterns that could be prevented
- New libraries or tools being used consistently
- Emerging best practices in the codebase

## Analysis Process

- Compare new code with existing rules
- Identify patterns that should be standardized
- Look for references to external documentation
- Check for consistent error handling patterns
- Monitor test patterns and coverage

## Rule Updates

### Add New Rules When:
- A new technology/pattern is used in 3+ files
- Common bugs could be prevented by a rule
- Code reviews repeatedly mention the same feedback
- New security or performance patterns emerge

### Modify Existing Rules When:
- Better examples exist in the codebase
- Additional edge cases are discovered
- Related rules have been updated
- Implementation details have changed

### Example Pattern Recognition:

```typescript
// If you see repeated patterns like:
const data = await prisma.user.findMany({
  select: { id: true, email: true },
  where: { status: 'ACTIVE' }
});

// Consider adding to [prisma.mdc](mdc:shipixen/.cursor/rules/prisma.mdc):
// - Standard select fields
// - Common where conditions
// - Performance optimization patterns
```

### Rule Quality Checks:
- Rules should be actionable and specific
- Examples should come from actual code
- References should be up to date
- Patterns should be consistently enforced

## Continuous Improvement

### Monitor Code Review Comments
- Track repeated feedback patterns
- Identify common issues across reviews
- Note successful patterns and approaches
- Document best practices that emerge

### Track Common Development Questions
- Record frequently asked questions
- Identify knowledge gaps in rules
- Update rules to address common confusion
- Add examples for complex scenarios

### Update Rules After Major Refactors
- Review rule applicability after large changes
- Update examples to reflect new patterns
- Remove outdated patterns and approaches
- Add new patterns that emerge

### Add Links to Relevant Documentation
- Reference official documentation
- Link to internal knowledge bases
- Include external best practice guides
- Connect related rules and concepts

### Cross-Reference Related Rules
- Ensure consistency between rules
- Update related rules when one changes
- Maintain logical rule organization
- Avoid conflicting guidance

## Rule Deprecation

### Mark Outdated Patterns as Deprecated
- Clearly indicate deprecated approaches
- Explain why the pattern is deprecated
- Provide migration guidance
- Set timeline for removal

### Remove Rules That No Longer Apply
- Delete obsolete rules
- Update references to removed rules
- Clean up rule documentation
- Maintain rule index accuracy

### Update References to Deprecated Rules
- Fix broken links and references
- Update rule documentation
- Notify users of changes
- Provide alternative guidance

### Document Migration Paths for Old Patterns
- Provide step-by-step migration guides
- Include code examples for transitions
- Explain benefits of new patterns
- Support gradual adoption

## Documentation Updates

### Keep Examples Synchronized with Code
- Update examples when code changes
- Ensure examples are current and working
- Test examples regularly
- Remove outdated examples

### Update References to External Docs
- Check external link validity
- Update to latest documentation versions
- Ensure references are still relevant
- Add new relevant resources

### Maintain Links Between Related Rules
- Keep cross-references current
- Update links when rules change
- Ensure logical rule relationships
- Facilitate rule discovery

### Document Breaking Changes
- Clearly mark breaking changes
- Explain impact and migration needs
- Provide upgrade guidance
- Maintain change logs

## Pattern Recognition and Analysis

### Identify Emerging Patterns
- Monitor codebase for new patterns
- Track technology adoption trends
- Note successful implementation approaches
- Identify common problem solutions

### Analyze Error Patterns
- Track common bugs and issues
- Identify preventable error types
- Note debugging patterns
- Document error resolution approaches

### Monitor Performance Patterns
- Track performance optimization approaches
- Note successful scaling strategies
- Identify performance anti-patterns
- Document performance best practices

### Security Pattern Analysis
- Monitor security implementation patterns
- Track vulnerability prevention approaches
- Note secure coding practices
- Document security requirements

## Rule Generation and Automation

### Automated Rule Generation
- Use AI to analyze code patterns
- Generate rules from code examples
- Automate rule validation
- Streamline rule creation process

### Rule Testing and Validation
- Test rules against existing codebase
- Validate rule effectiveness
- Measure rule adoption and impact
- Refine rules based on feedback

### Rule Versioning and Management
- Version control for rules
- Track rule evolution over time
- Maintain rule change history
- Support rule rollback if needed

## Integration with Development Workflow

### Pre-commit Rule Validation
- Check code against current rules
- Flag potential rule violations
- Suggest rule improvements
- Maintain rule compliance

### Code Review Integration
- Include rule checks in reviews
- Flag rule violations during review
- Suggest rule updates based on review
- Document review findings for rule updates

### Continuous Integration Rule Checks
- Automate rule validation in CI
- Fail builds on critical rule violations
- Generate rule compliance reports
- Track rule effectiveness over time

## Rule Effectiveness Measurement

### Track Rule Adoption
- Monitor rule usage across projects
- Measure rule compliance rates
- Track rule effectiveness metrics
- Identify underutilized rules

### Measure Impact on Code Quality
- Compare code quality before/after rules
- Track bug reduction from rules
- Measure performance improvements
- Assess maintainability gains

### User Feedback Collection
- Gather feedback on rule usefulness
- Identify rule improvement opportunities
- Track user satisfaction with rules
- Prioritize rule updates based on feedback

## Rule Maintenance Schedule

### Regular Rule Reviews
- Monthly rule effectiveness review
- Quarterly rule cleanup and updates
- Annual comprehensive rule audit
- Continuous rule monitoring and updates

### Rule Lifecycle Management
- Plan rule creation and updates
- Schedule rule deprecation
- Manage rule dependencies
- Coordinate rule changes across teams

### Rule Communication
- Announce new rules and updates
- Provide training on rule usage
- Share rule success stories
- Maintain rule documentation

## Advanced Rule Features

### Conditional Rule Application
- Apply rules based on context
- Use different rules for different file types
- Apply rules based on project stage
- Customize rules for team preferences

### Rule Templates and Inheritance
- Create base rule templates
- Inherit and extend base rules
- Customize rules for specific projects
- Maintain rule consistency across projects

### Rule Analytics and Reporting
- Track rule usage patterns
- Generate rule effectiveness reports
- Identify rule improvement opportunities
- Measure rule impact on development

## Best Practices for Rule Improvement

### Start Small and Iterate
- Begin with high-impact rules
- Test rules in small scope first
- Gather feedback and refine
- Expand successful rules gradually

### Focus on Actionable Guidance
- Provide specific, implementable advice
- Include concrete examples
- Give clear step-by-step instructions
- Avoid vague or general guidance

### Maintain Rule Consistency
- Ensure rules don't conflict
- Use consistent terminology
- Apply consistent formatting
- Maintain logical rule organization

### Keep Rules Current
- Update rules with codebase changes
- Remove outdated patterns
- Add new best practices
- Stay current with technology trends

## Integration with Kiro Methodology

### Requirements Phase Integration
- Update rules based on requirements patterns
- Add rules for common requirement issues
- Improve rule coverage for edge cases
- Enhance rule guidance for complex features

### Design Phase Integration
- Update rules based on design patterns
- Add rules for architectural decisions
- Improve rule coverage for design issues
- Enhance rule guidance for system design

### Tasks Phase Integration
- Update rules based on implementation patterns
- Add rules for common task issues
- Improve rule coverage for task execution
- Enhance rule guidance for task planning

### Implementation Phase Integration
- Update rules based on coding patterns
- Add rules for common implementation issues
- Improve rule coverage for code quality
- Enhance rule guidance for testing and deployment

Follow this self-improvement system to continuously enhance the effectiveness of your Cursor rules and maintain high-quality development practices across your projects.
description:
globs:
alwaysApply: false
---
