---
description: Technology stack standards, framework guidelines, and dependency management
globs: **/*
alwaysApply: true
---
# Tech Stack Standards

## Overview

This rule defines the technology stack standards, including framework versions, best practices, deprecated methods to avoid, and performance optimization patterns for the project.

## Core Framework Stack

### React 18.2.0
- **UI Library**: Core React library with concurrent features
- **Features**: Suspense, automatic batching, server components
- **Best Practice**: Use React 18 patterns

#### React Best Practices
```typescript
// ✅ Good: Use functional components with hooks
const UserProfile: React.FC<UserProfileProps> = ({ user }) => {
  const [isLoading, setIsLoading] = useState(false);
  
  useEffect(() => {
    // Side effects
  }, [user.id]);
  
  return <div>{user.name}</div>;
};

// ❌ Avoid: Class components (legacy)
class UserProfile extends React.Component {
  // Avoid class components
}
```

#### React Hooks Best Practices
```typescript
// ✅ Good: Custom hooks for reusable logic
const useUserData = (userId: string) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    fetchUser(userId).then(setUser).finally(() => setLoading(false));
  }, [userId]);
  
  return { user, loading };
};

// ✅ Good: Proper dependency arrays
useEffect(() => {
  // Effect logic
}, [dependency1, dependency2]); // Include all dependencies
```

### TypeScript 5.1.3
- **Configuration**: Strict mode enabled for better type safety
- **Best Practice**: Modern TS version with strict typing

#### TypeScript Best Practices
```typescript
// ✅ Good: Explicit typing
interface User {
  id: string;
  name: string;
  email: string;
}

const getUser = async (id: string): Promise<User> => {
  // Implementation
};

// ❌ Avoid: Any types
const getUser = async (id: any): Promise<any> => {
  // Avoid any types
};
```

#### TypeScript Configuration
```json
{
  "compilerOptions": {
    "strict": true,
    "noImplicitAny": true,
    "noImplicitReturns": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true
  }
}
```

### Next.js 14.2.24 (App Router)
- **Framework**: React meta-framework with App Router architecture
- **Features Used**: API routes, SSG/SSR, OG image generation, bundle analysis
- **Best Practice**: Use App Router patterns, avoid pages directory

#### Next.js App Router Best Practices
```typescript
// ✅ Good: Server Components by default
export default async function UserPage({ params }: { params: { id: string } }) {
  const user = await getUser(params.id);
  return <UserProfile user={user} />;
}

// ✅ Good: Client Components when needed
'use client';
export default function InteractiveComponent() {
  const [state, setState] = useState();
  return <div>Interactive content</div>;
}

// ❌ Avoid: Pages directory (legacy)
// pages/user/[id].tsx - Use app directory instead
```

## UI Component System

### Tailwind CSS 3.3.3
- **Styling**: Utility-first CSS framework
- **Best Practice**: Use utility classes, avoid custom CSS

#### Tailwind Best Practices
```typescript
// ✅ Good: Utility classes
<div className="flex items-center justify-between p-4 bg-white shadow-md rounded-lg">
  <h2 className="text-xl font-semibold text-gray-900">Title</h2>
  <button className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
    Action
  </button>
</div>

// ❌ Avoid: Custom CSS when utilities exist
<div className="custom-container">
  <h2 className="custom-title">Title</h2>
</div>
```

#### Tailwind Configuration
```javascript
// tailwind.config.js
module.exports = {
  content: ['./src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#eff6ff',
          500: '#3b82f6',
          900: '#1e3a8a',
        },
      },
    },
  },
  plugins: [require('@tailwindcss/forms')],
};
```

### Radix UI Primitives (v1.x series)
- **Accessibility**: Complete accessibility-first component library
- **Best Practice**: Use compound component patterns

#### Radix UI Best Practices
```typescript
// ✅ Good: Compound component pattern
import * as Dialog from '@radix-ui/react-dialog';

export const Modal = ({ children, ...props }) => (
  <Dialog.Root {...props}>
    <Dialog.Trigger asChild>
      <button>Open</button>
    </Dialog.Trigger>
    <Dialog.Portal>
      <Dialog.Overlay className="fixed inset-0 bg-black/50" />
      <Dialog.Content className="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white p-6 rounded-lg">
        {children}
      </Dialog.Content>
    </Dialog.Portal>
  </Dialog.Root>
);

// ✅ Good: Customize with Tailwind, not inline styles
<Dialog.Content className="bg-white p-6 rounded-lg shadow-lg">
  Content
</Dialog.Content>
```

## State Management

### Zustand 4.5.2 (Global State)
- **Philosophy**: Minimal, unopinionated state management
- **Usage**: Theme preferences, global UI state, component playground state
- **Best Practice**: Create typed stores with proper selectors

#### Zustand Best Practices
```typescript
// ✅ Good: Typed store with selectors
interface ThemeState {
  theme: 'light' | 'dark';
  setTheme: (theme: 'light' | 'dark') => void;
}

export const useThemeStore = create<ThemeState>((set) => ({
  theme: 'light',
  setTheme: (theme) => set({ theme }),
}));

// ✅ Good: Use selectors for performance
const theme = useThemeStore((state) => state.theme);
const setTheme = useThemeStore((state) => state.setTheme);

// ❌ Avoid: Accessing entire store
const store = useThemeStore(); // Don't do this
```

### React Hook Form 7.46.2 + Validation
- **Form Library**: Performant, uncontrolled forms
- **Validation**: `@hookform/resolvers` ^3.3.1 + `zod` ^3.22.2
- **Integration**: Works seamlessly with Radix UI form components

#### React Hook Form Best Practices
```typescript
// ✅ Good: Form setup with validation
const formSchema = z.object({
  email: z.string().email(),
  name: z.string().min(2),
});

function ContactForm() {
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
  });

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)}>
        <FormField
          control={form.control}
          name="email"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Email</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
      </form>
    </Form>
  );
}
```

## Database and ORM

### Prisma (Latest)
- **ORM**: Type-safe database client
- **Features**: Auto-generated types, migrations, query builder
- **Best Practice**: Use Prisma Client for all database operations

#### Prisma Best Practices
```typescript
// ✅ Good: Use Prisma Client
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export const getUser = async (id: string) => {
  return prisma.user.findUnique({
    where: { id },
    select: { id: true, name: true, email: true },
  });
};

// ✅ Good: Use transactions for complex operations
export const createUserWithProfile = async (userData: CreateUserInput) => {
  return prisma.$transaction(async (tx) => {
    const user = await tx.user.create({
      data: userData,
    });
    
    await tx.profile.create({
      data: { userId: user.id },
    });
    
    return user;
  });
};

// ❌ Avoid: Raw SQL unless necessary
// Use Prisma's query builder instead
```

## API and HTTP Client

### Axios 1.7.7
- **HTTP Client**: API calls, newsletter subscriptions
- **Best Practice**: Create axios instances with base configuration

#### Axios Best Practices
```typescript
// ✅ Good: Create configured instances
import axios from 'axios';

const apiClient = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// ✅ Good: Add interceptors for common functionality
apiClient.interceptors.request.use((config) => {
  const token = localStorage.getItem('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

apiClient.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      // Handle unauthorized
    }
    return Promise.reject(error);
  }
);

// ✅ Good: Type-safe API calls
interface ApiResponse<T> {
  data: T;
  message: string;
}

export const getUser = async (id: string): Promise<ApiResponse<User>> => {
  const response = await apiClient.get(`/users/${id}`);
  return response.data;
};
```

## Testing Framework

### Jest + React Testing Library
- **Testing**: Unit and integration tests
- **Best Practice**: Test behavior, not implementation

#### Testing Best Practices
```typescript
// ✅ Good: Test user behavior
import { render, screen, fireEvent } from '@testing-library/react';
import { LoginForm } from './LoginForm';

describe('LoginForm', () => {
  it('submits form with user input', async () => {
    const mockSubmit = jest.fn();
    render(<LoginForm onSubmit={mockSubmit} />);
    
    fireEvent.change(screen.getByLabelText(/email/i), {
      target: { value: 'test@example.com' },
    });
    fireEvent.change(screen.getByLabelText(/password/i), {
      target: { value: 'password123' },
    });
    fireEvent.click(screen.getByRole('button', { name: /login/i }));
    
    expect(mockSubmit).toHaveBeenCalledWith({
      email: 'test@example.com',
      password: 'password123',
    });
  });
});

// ❌ Avoid: Testing implementation details
expect(component.state.email).toBe('test@example.com');
```

## Build and Development Tools

### Vite 4.x
- **Build Tool**: Fast development and build tool
- **Features**: HMR, fast refresh, optimized builds
- **Best Practice**: Use Vite for React projects

#### Vite Configuration
```typescript
// vite.config.ts
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
  build: {
    outDir: 'dist',
    sourcemap: true,
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['react', 'react-dom'],
          ui: ['@radix-ui/react-dialog'],
        },
      },
    },
  },
});
```

### ESLint + Prettier
- **Code Quality**: Linting and formatting
- **Best Practice**: Enforce consistent code style

#### ESLint Configuration
```javascript
// eslint.config.js
module.exports = {
  extends: [
    'next/core-web-vitals',
    '@typescript-eslint/recommended',
    'prettier',
  ],
  rules: {
    '@typescript-eslint/no-unused-vars': 'error',
    '@typescript-eslint/no-explicit-any': 'error',
    'react-hooks/exhaustive-deps': 'error',
  },
};
```

## Performance Optimization

### Code Splitting
```typescript
// ✅ Good: Lazy load components
import { lazy, Suspense } from 'react';

const HeavyComponent = lazy(() => import('./HeavyComponent'));

function App() {
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <HeavyComponent />
    </Suspense>
  );
}
```

### Image Optimization
```typescript
// ✅ Good: Use Next.js Image component
import Image from 'next/image';

function OptimizedImage() {
  return (
    <Image
      src="/hero.jpg"
      alt="Hero image"
      width={1200}
      height={600}
      priority
      placeholder="blur"
      blurDataURL="data:image/jpeg;base64,..."
    />
  );
}
```

### Bundle Optimization
```typescript
// ✅ Good: Tree shaking friendly imports
import { useState, useEffect } from 'react'; // Only import what you need

// ❌ Avoid: Import entire libraries
import * as React from 'react'; // Don't do this
```

## Security Best Practices

### Environment Variables
```bash
# ✅ Good: Use environment variables for secrets
NEXT_PUBLIC_API_URL=https://api.example.com
DATABASE_URL=postgresql://user:pass@localhost:5432/db
JWT_SECRET=your-secret-key

# ❌ Avoid: Hardcode secrets in code
const API_KEY = 'sk-1234567890abcdef'; // Don't do this
```

### Input Validation
```typescript
// ✅ Good: Validate all inputs
import { z } from 'zod';

const userSchema = z.object({
  email: z.string().email(),
  name: z.string().min(2).max(100),
  age: z.number().min(0).max(120),
});

function createUser(input: unknown) {
  const validated = userSchema.parse(input);
  // Process validated data
}
```

### Authentication
```typescript
// ✅ Good: Use secure authentication
import { sign, verify } from 'jsonwebtoken';

const token = sign({ userId: user.id }, process.env.JWT_SECRET!, {
  expiresIn: '1h',
});

// ✅ Good: Verify tokens on protected routes
const decoded = verify(token, process.env.JWT_SECRET!);
```

## Monitoring and Analytics

### Vercel Analytics
```typescript
// ✅ Good: Add analytics
import { Analytics } from '@vercel/analytics/react';

function App() {
  return (
    <>
      <main>Your app</main>
      <Analytics />
    </>
  );
}
```

### Error Tracking
```typescript
// ✅ Good: Track errors
import * as Sentry from '@sentry/nextjs';

Sentry.init({
  dsn: process.env.NEXT_PUBLIC_SENTRY_DSN,
  environment: process.env.NODE_ENV,
});
```

## Deprecated Patterns to Avoid

### React Patterns
```typescript
// ❌ Avoid: Class components
class UserProfile extends React.Component {
  // Use functional components instead
}

// ❌ Avoid: Mixins
// Use composition instead

// ❌ Avoid: String refs
<div ref="myDiv" />
// Use callback refs or useRef instead
```

### JavaScript Patterns
```typescript
// ❌ Avoid: var declarations
var user = { name: 'John' };

// ❌ Avoid: Function constructors
const User = new Function('name', 'this.name = name');

// ❌ Avoid: eval
eval('console.log("hello")');
```

### CSS Patterns
```css
/* ❌ Avoid: !important */
.button {
  color: red !important;
}

/* ❌ Avoid: Inline styles in JSX */
<div style={{ color: 'red' }} />

/* ✅ Good: Use Tailwind classes */
<div className="text-red-500" />
```

## Version Management

### Package.json Scripts
```json
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "type-check": "tsc --noEmit",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage"
  }
}
```

### Dependency Management
```bash
# ✅ Good: Use exact versions for critical dependencies
npm install react@18.2.0

# ✅ Good: Use ranges for development dependencies
npm install --save-dev @types/react@^18.0.0

# ✅ Good: Regular dependency updates
npm audit
npm update
```

Follow these tech stack standards to maintain consistent, secure, and performant applications using modern best practices.
description:
globs:
alwaysApply: false
---
