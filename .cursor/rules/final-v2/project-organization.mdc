---
description: Universal project structure, documentation standards, and EARS requirements formatting for all platforms
globs: **/*
alwaysApply: true
---
# Project Organization: Universal Structure and Documentation

## Table of Contents
1. [Universal Project Structure](#universal-project-structure)
2. [Platform-Specific Structures](#platform-specific-structures)
3. [File Naming Conventions](#file-naming-conventions)
4. [Documentation Standards](#documentation-standards)
5. [EARS Requirements Format](#ears-requirements-format)
6. [Spec Document Structure](#spec-document-structure)
7. [Configuration Management](#configuration-management)
8. [Import and Export Patterns](#import-and-export-patterns)
9. [Quality Standards](#quality-standards)
10. [Maintenance Guidelines](#maintenance-guidelines)

---

## Universal Project Structure

### Core Directory Layout (Applies to All Platforms)
```
project-root/
├── .specs/                 # Feature specifications and documentation
│   ├── features/          # Feature specifications
│   ├── steering/          # Project-specific guidance
│   └── hooks/             # Automation hooks
├── docs/                  # Project documentation
│   ├── api/              # API documentation
│   ├── architecture/     # System architecture docs
│   ├── user-guides/      # User documentation
│   └── development/      # Development guides
├── src/                   # Source code (platform-specific structure)
├── tests/                 # Test files and test data
├── config/                # Configuration files
├── scripts/               # Build and utility scripts
├── assets/                # Static assets (images, fonts, etc.)
└── tools/                 # Development tools and utilities
```

### Essential Files (All Projects)
```
project-root/
├── README.md              # Project overview and setup
├── CHANGELOG.md           # Version history and changes
├── CONTRIBUTING.md        # Contribution guidelines
├── LICENSE               # Project license
├── .gitignore            # Git ignore patterns
├── .editorconfig         # Editor configuration
└── package.json          # Project metadata (or equivalent)
```

---

## Platform-Specific Structures

### Web Applications
```
src/
├── components/            # Reusable UI components
│   ├── ui/               # Basic UI elements
│   ├── layout/           # Layout components
│   ├── forms/            # Form components
│   └── shared/           # Shared components
├── pages/                # Page components or views
├── services/             # Business logic and API calls
├── utils/                # Utility functions
├── hooks/                # Custom hooks (React) or composables (Vue)
├── stores/               # State management
├── types/                # Type definitions
├── styles/               # Styling files
├── assets/               # Static assets
└── constants/            # Application constants
```

### Mobile Applications (iOS/Android)
```
src/
├── screens/              # Screen components
├── components/           # Reusable components
├── navigation/           # Navigation configuration
├── services/             # Business logic and API calls
├── models/               # Data models
├── utils/                # Utility functions
├── stores/               # State management
├── assets/               # Images, fonts, etc.
├── constants/            # Application constants
└── localization/         # Internationalization files
```

### Backend APIs/Services
```
src/
├── controllers/          # Request handlers
├── services/             # Business logic
├── models/               # Data models
├── repositories/         # Data access layer
├── middleware/           # Request middleware
├── routes/               # Route definitions
├── utils/                # Utility functions
├── config/               # Configuration management
├── validators/           # Input validation
└── types/                # Type definitions
```

### Desktop Applications
```
src/
├── windows/              # Window/form definitions
├── components/           # Reusable components
├── services/             # Business logic
├── models/               # Data models
├── utils/                # Utility functions
├── resources/            # Application resources
├── config/               # Configuration files
└── localization/         # Internationalization
```

### CLI Tools/Scripts
```
src/
├── commands/             # Command implementations
├── lib/                  # Core library functions
├── utils/                # Utility functions
├── config/               # Configuration management
├── templates/            # File templates
└── types/                # Type definitions
```

---

## File Naming Conventions

### Universal Naming Principles
- **Descriptive Names**: Clearly indicate file purpose
- **Consistent Patterns**: Follow established conventions
- **Platform Conventions**: Respect platform-specific standards
- **Avoid Abbreviations**: Use full words when possible

### Platform-Specific Conventions

#### JavaScript/TypeScript
- **Components**: PascalCase (`UserProfile.tsx`, `LoginForm.tsx`)
- **Utilities**: camelCase (`formatDate.ts`, `validateEmail.ts`)
- **Constants**: UPPER_SNAKE_CASE (`API_ENDPOINTS.ts`)
- **Types**: PascalCase (`UserTypes.ts`, `ApiTypes.ts`)

#### Python
- **Modules**: snake_case (`user_service.py`, `data_utils.py`)
- **Classes**: PascalCase (`UserService`, `DataProcessor`)
- **Constants**: UPPER_SNAKE_CASE (`API_ENDPOINTS`, `DEFAULT_CONFIG`)

#### Java/Kotlin
- **Classes**: PascalCase (`UserService.java`, `DataProcessor.kt`)
- **Packages**: lowercase (`com.company.userservice`)
- **Constants**: UPPER_SNAKE_CASE (`API_ENDPOINTS`, `DEFAULT_TIMEOUT`)

#### Swift
- **Files**: PascalCase (`UserService.swift`, `DataProcessor.swift`)
- **Protocols**: PascalCase with descriptive suffix (`UserServiceProtocol`)

#### C#
- **Classes**: PascalCase (`UserService.cs`, `DataProcessor.cs`)
- **Interfaces**: PascalCase with 'I' prefix (`IUserService.cs`)
- **Constants**: PascalCase (`ApiEndpoints`, `DefaultTimeout`)

### Test File Conventions
- **Match Source**: `Component.test.tsx`, `service.test.py`
- **Descriptive**: `user-authentication.test.js`
- **Integration**: `api-integration.test.ts`
- **E2E**: `user-workflow.e2e.test.js`

---

## Documentation Standards

### README Structure Template
```markdown
# Project Name
Brief, compelling description of what this project does and why it exists.

## Features
- **Feature 1**: Clear description of key functionality
- **Feature 2**: Another important feature
- **Feature 3**: Additional capabilities

## Quick Start

### Prerequisites
- [Platform/Runtime] version X.X+
- [Package Manager] (npm, pip, gradle, etc.)
- [Database] (if applicable)
- [Other dependencies]

### Installation
```bash
# Clone the repository
git clone https://github.com/username/project-name.git
cd project-name

# Install dependencies
[package-manager] install

# Set up environment
cp .env.example .env
# Edit .env with your configuration

# Initialize database (if applicable)
[command to setup database]

# Start the application
[command to start]
```

### Configuration
[Explain key configuration options]

### Usage
[Basic usage examples]

## Project Structure
[Brief overview of directory organization]

## API Documentation
[Link to API docs if applicable]

## Contributing
See [CONTRIBUTING.md](CONTRIBUTING.md) for guidelines.

## License
This project is licensed under the [LICENSE_TYPE] License - see [LICENSE](LICENSE) for details.
```

### API Documentation Template
```markdown
# API Documentation

## Base URL
- Production: `https://api.example.com/v1`
- Staging: `https://staging-api.example.com/v1`

## Authentication
[Authentication method and examples]

## Endpoints

### GET /users
Retrieve list of users with pagination.

**Parameters:**
- `page` (integer, optional): Page number (default: 1)
- `limit` (integer, optional): Items per page (default: 10, max: 100)
- `search` (string, optional): Search term for filtering

**Response:**
```json
{
  "users": [
    {
      "id": "string",
      "name": "string",
      "email": "string",
      "created_at": "ISO 8601 datetime"
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 10,
    "total": 100,
    "pages": 10
  }
}
```

**Status Codes:**
- `200`: Success
- `400`: Bad request (invalid parameters)
- `401`: Unauthorized
- `500`: Internal server error

### POST /users
Create a new user.

**Request Body:**
```json
{
  "name": "string (required, 2-100 characters)",
  "email": "string (required, valid email format)",
  "password": "string (required, min 8 characters)"
}
```

**Response:**
```json
{
  "id": "string",
  "name": "string",
  "email": "string",
  "created_at": "ISO 8601 datetime"
}
```

**Status Codes:**
- `201`: Created successfully
- `400`: Validation error
- `409`: Email already exists
- `500`: Internal server error
```

### Component Documentation Template
```markdown
# ComponentName

Brief description of what this component does and when to use it.

## Props/Parameters

| Name | Type | Default | Required | Description |
|------|------|---------|----------|-------------|
| `title` | `string` | - | Yes | The title to display |
| `onClick` | `function` | - | No | Callback when clicked |
| `disabled` | `boolean` | `false` | No | Whether component is disabled |
| `variant` | `'primary' \| 'secondary'` | `'primary'` | No | Visual style variant |

## Usage Examples

### Basic Usage
```[language]
[Basic usage example]
```

### Advanced Usage
```[language]
[Advanced usage example with multiple props]
```

### With Event Handlers
```[language]
[Example with event handling]
```

## Accessibility
- [Accessibility features and considerations]
- [Keyboard navigation support]
- [Screen reader compatibility]

## Testing
```bash
[command to run tests for this component]
```

## Related Components
- [Link to related components]
- [Link to parent/child components]
```---


## EARS Requirements Format

### EARS Keywords and Structure
EARS (Easy Approach to Requirements Syntax) provides a structured way to write clear, testable requirements.

#### Core Keywords
- **WHEN**: Event-driven requirements (triggered by specific events)
- **IF**: State-driven requirements (based on system or user state)
- **WHILE**: Continuous requirements (ongoing behavior)
- **WHERE**: Context-specific requirements (location or environment-based)

#### EARS Format Structure
```
KEYWORD [trigger/condition/context] THEN [system name] SHALL [specific response/behavior]
```

### EARS Best Practices

#### Writing Effective EARS Requirements
- **One requirement per statement**: Each EARS statement should contain exactly one requirement
- **Use active voice**: Write requirements using active voice for clarity
- **Be specific and measurable**: Avoid vague terms like "user-friendly" or "fast"
- **Make requirements testable**: Each requirement should be verifiable through testing
- **Use consistent terminology**: Use the same terms throughout all requirements

#### Good EARS Examples

**Event-Driven (WHEN):**
```
WHEN a user clicks the "Save" button THEN the system SHALL validate all form fields
WHEN a file upload exceeds the size limit THEN the system SHALL display an error message
WHEN a user session expires THEN the system SHALL redirect to the login page
WHEN a payment transaction fails THEN the system SHALL log the error and notify the user
```

**State-Driven (IF):**
```
IF a user is not authenticated THEN the system SHALL deny access to protected resources
IF the database connection fails THEN the system SHALL display a maintenance message
IF a user has admin privileges THEN the system SHALL show the admin panel
IF the system is in maintenance mode THEN the system SHALL display a maintenance notice
```

**Continuous (WHILE):**
```
WHILE a file is uploading the system SHALL display a progress indicator
WHILE a user is typing the system SHALL provide real-time validation feedback
WHILE the system is processing a request the system SHALL prevent duplicate submissions
WHILE a user session is active the system SHALL refresh the authentication token
```

**Context-Specific (WHERE):**
```
WHERE the user is on a mobile device the system SHALL use responsive layout
WHERE the application runs in production mode the system SHALL log errors to external service
WHERE multiple users edit simultaneously the system SHALL handle conflicts gracefully
WHERE the user is in a restricted region the system SHALL limit available features
```

### Complex EARS Requirements

#### Compound Conditions
```
WHEN a user submits a form AND all fields are valid THEN the system SHALL save the data
IF a user is authenticated AND has premium subscription THEN the system SHALL unlock premium features
WHILE a backup is running AND system load is high THEN the system SHALL throttle backup speed
```

#### Nested Requirements
```
WHEN a user attempts to delete an item THEN the system SHALL:
  - Display a confirmation dialog
  - IF user confirms THEN delete the item and show success message
  - IF user cancels THEN close dialog without changes
```

#### Time-Based Requirements
```
WHEN a user password expires in 7 days THEN the system SHALL send a reminder email
IF a user session is idle for 30 minutes THEN the system SHALL automatically log out the user
WHILE a scheduled task is overdue by more than 1 hour THEN the system SHALL send an alert
```

### EARS Anti-Patterns to Avoid

#### Compound Requirements
```
❌ Bad: WHEN a user registers THEN the system SHALL create an account AND send a welcome email AND log the event

✅ Good: 
WHEN a user registers THEN the system SHALL create an account
WHEN a user account is created THEN the system SHALL send a welcome email
WHEN a user registers THEN the system SHALL log the registration event
```

#### Vague Conditions
```
❌ Bad: WHEN appropriate THEN the system SHALL show notifications

✅ Good: WHEN a new message arrives THEN the system SHALL show a notification
```

#### Implementation Details
```
❌ Bad: WHEN a user submits THEN the system SHALL use AJAX to send the data

✅ Good: WHEN a user submits THEN the system SHALL send the form data without page reload
```

#### Untestable Requirements
```
❌ Bad: WHEN a user interacts THEN the system SHALL feel responsive

✅ Good: WHEN a user clicks a button THEN the system SHALL respond within 200ms
```

---

## Spec Document Structure

### Three Core Documents
Every feature specification consists of three essential documents:

1. **requirements.md** - EARS format requirements with unique IDs
2. **design.md** - Technical design referencing requirement IDs
3. **tasks.json** - Implementation tasks with complexity analysis

### Requirements Document Template
```markdown
# Requirements Document

## Document Information
- **Feature Name**: [Descriptive Feature Name]
- **Version**: 1.0
- **Date**: [Current Date]
- **Author**: [Author Name]
- **Stakeholders**: [Key Stakeholders]
- **Platform**: [Target Platform(s)]

## Introduction

### Feature Summary
[One-sentence summary of what this feature accomplishes]

### Business Value
[Clear explanation of business value and expected outcomes]

### Success Criteria
[Measurable criteria for determining feature success]

### Scope
**Included:**
- [What is included in this feature]
- [Specific functionality covered]

**Excluded:**
- [What is explicitly not included]
- [Future enhancements not in scope]

## Requirements

### Requirement 1: [REQ-001] [Requirement Title]
**User Story:** As a [specific role], I want [specific functionality], so that [clear benefit].

#### Acceptance Criteria
1. WHEN [specific trigger] THEN [system] SHALL [specific response]
2. IF [specific condition] THEN [system] SHALL [required behavior]
3. WHILE [ongoing condition] [system] SHALL [continuous behavior]
4. WHERE [specific context] [system] SHALL [contextual behavior]

#### Additional Details
- **Priority**: High/Medium/Low
- **Complexity Estimate**: 1-10 scale
- **Dependencies**: [List of dependencies]
- **Assumptions**: [Key assumptions made]
- **Constraints**: [Technical or business constraints]
- **Acceptance Tests**: [How to validate this requirement]

### [Additional Requirements with unique IDs...]

## Non-Functional Requirements

### Performance Requirements
- **REQ-NFR-001**: WHEN [load condition] THEN [system] SHALL [performance criteria]
- **REQ-NFR-002**: IF [usage scenario] THEN [system] SHALL [response time requirement]

### Security Requirements
- **REQ-SEC-001**: WHEN [security event] THEN [system] SHALL [security response]
- **REQ-SEC-002**: IF [authentication condition] THEN [system] SHALL [access control behavior]

### Usability Requirements
- **REQ-UX-001**: WHEN [user interaction] THEN [system] SHALL [usability standard]
- **REQ-UX-002**: WHERE [accessibility context] [system] SHALL [accessibility requirement]

### Platform-Specific Requirements
- **REQ-PLAT-001**: WHERE [platform context] [system] SHALL [platform-specific behavior]

## Integration Requirements
[Requirements for integration with existing systems, referencing specific APIs, services, or data sources]

## Compliance Requirements
[Any regulatory, legal, or organizational compliance requirements]

## Glossary
[Definitions of domain-specific terms used in requirements]
```

### Design Document Template
```markdown
# Design Document

## Document Information
- **Feature Name**: [Feature Name]
- **Version**: 1.0
- **Date**: [Current Date]
- **Author**: [Author Name]
- **Requirements Reference**: [Link to requirements.md]
- **Platform**: [Target Platform(s)]

## Overview

### Design Goals
[Primary objectives and constraints for the design]

### Key Architectural Decisions
[Major design decisions and their rationale]

### Technology Choices
[Technology stack decisions and justification for the platform]

### Requirements Traceability
[How this design addresses specific requirements]

## System Architecture

### High-Level Architecture
[System overview diagram and description]
[Platform-specific architectural patterns]

### Component Relationships
[How major components interact and communicate]
[Platform-specific communication patterns]

### Data Flow
[How data moves through the system]
[Platform-specific data handling]

### External Integrations
[Integration points with external systems]
[Platform-specific integration patterns]

## Detailed Component Design

### Component 1: [Component Name]
**Purpose**: [What this component does]
**Requirements Addressed**: REQ-001, REQ-003, REQ-007

**Responsibilities**:
- [Primary responsibility 1]
- [Primary responsibility 2]
- [Primary responsibility 3]

**Interfaces**:
- **Input**: [Input interfaces and data formats]
- **Output**: [Output interfaces and data formats]
- **Dependencies**: [Dependencies on other components]

**Platform Considerations**: [Platform-specific implementation details]

**Internal Architecture**: [Internal component structure]

### [Additional Components...]

## Data Models

### Entity Relationship Diagram
[ERD or data model diagram appropriate for platform]

### Data Entities
[Detailed description of each data entity]
[Platform-specific data storage considerations]

### Data Validation Rules
[Validation and constraint rules]
[Platform-specific validation approaches]

### Data Storage Strategy
[How data is stored, indexed, and retrieved]
[Platform-specific storage solutions]

## User Interface Design (if applicable)

### UI Architecture
[UI component structure and organization]
[Platform-specific UI patterns]

### User Experience Flow
[User interaction flows and navigation]
[Platform-specific UX considerations]

### Accessibility Considerations
[Accessibility requirements and implementation]
[Platform-specific accessibility standards]

## API Design (if applicable)

### Endpoint Specifications
[Detailed API endpoint definitions]
[Platform-specific API patterns]

### Request/Response Formats
[Data formats and schemas]
[Platform-specific serialization]

### Authentication and Authorization
[Security implementation for APIs]
[Platform-specific security patterns]

### Error Handling
[API error response formats and codes]
[Platform-specific error handling]

## Error Handling Strategy

### Error Classification
[Types of errors and how they're categorized]
[Platform-specific error types]

### Error Recovery Mechanisms
[How the system recovers from different error types]
[Platform-specific recovery strategies]

### Logging and Monitoring
[What gets logged and how errors are monitored]
[Platform-specific logging solutions]

### User Experience for Errors
[How errors are presented to users]
[Platform-specific error presentation]

## Testing Strategy

### Unit Testing Approach
[Strategy for testing individual components]
[Platform-specific testing frameworks]

### Integration Testing Plan
[How component interactions will be tested]
[Platform-specific integration testing]

### End-to-End Testing Scenarios
[Complete user workflow testing approach]
[Platform-specific E2E testing tools]

### Performance Testing Strategy
[How performance will be validated]
[Platform-specific performance testing]

### Security Testing Plan
[Security validation and vulnerability testing]
[Platform-specific security testing]

## Performance Considerations

### Performance Requirements
[Specific performance targets and constraints]
[Platform-specific performance considerations]

### Optimization Strategies
[Planned performance optimizations]
[Platform-specific optimization techniques]

### Scalability Plan
[How the system will scale with growth]
[Platform-specific scaling strategies]

### Monitoring and Metrics
[What performance metrics will be tracked]
[Platform-specific monitoring tools]

## Security Implementation

### Authentication Strategy
[How users will be authenticated]
[Platform-specific authentication methods]

### Authorization Model
[How access control will be implemented]
[Platform-specific authorization patterns]

### Data Protection
[How sensitive data will be protected]
[Platform-specific data protection methods]

### Security Monitoring
[How security events will be monitored]
[Platform-specific security monitoring]

## Deployment Strategy

### Environment Requirements
[Infrastructure and environment needs]
[Platform-specific deployment requirements]

### Deployment Process
[How the system will be deployed]
[Platform-specific deployment tools and processes]

### Configuration Management
[How configuration will be managed]
[Platform-specific configuration approaches]

### Rollback Strategy
[How to rollback if issues occur]
[Platform-specific rollback procedures]

## Maintenance and Support

### Monitoring Strategy
[How the system will be monitored in production]
[Platform-specific monitoring solutions]

### Backup and Recovery
[Data backup and disaster recovery plans]
[Platform-specific backup solutions]

### Update and Patch Management
[How updates and patches will be managed]
[Platform-specific update mechanisms]
```

### Tasks Document Template
```json
{
  "metadata": {
    "featureName": "Feature Name",
    "version": "1.0",
    "date": "2024-01-08",
    "author": "Author Name",
    "requirementsReference": "requirements.md",
    "designReference": "design.md",
    "platform": "Target Platform",
    "totalTasks": 0,
    "completedTasks": 0,
    "lastUpdated": "2024-01-08T00:00:00Z"
  },
  "tasks": [
    {
      "id": 1,
      "title": "Task Name",
      "description": "Detailed description of what needs to be accomplished",
      "status": "pending",
      "dependencies": [2, 3],
      "priority": "high",
      "complexityScore": 6,
      "complexityAnalysis": {
        "technical": 7,
        "coordination": 5,
        "risk": 6,
        "scope": 6,
        "reasoning": "Medium-high complexity due to multiple integration points and moderate technical challenges"
      },
      "requirementsAddressed": ["REQ-001", "REQ-003", "REQ-007"],
      "platform": "Target Platform",
      "details": "Detailed implementation guidance and context",
      "testStrategy": "How to validate this task is complete",
      "acceptanceCriteria": [
        "Specific, measurable criteria for task completion",
        "Additional validation requirements"
      ],
      "estimatedEffort": "4-6 hours",
      "assignee": null,
      "startDate": null,
      "completedDate": null,
      "subtasks": [
        {
          "id": 1,
          "title": "Subtask name",
          "description": "Specific subtask details",
          "completed": false,
          "estimatedEffort": "1-2 hours",
          "dependencies": [],
          "acceptanceCriteria": "Specific validation for this subtask"
        }
      ],
      "notes": [],
      "blockers": []
    }
  ],
  "logs": [
    {
      "date": "2024-01-08T00:00:00Z",
      "action": "Task created",
      "details": "Initial task creation",
      "taskId": 1
    }
  ]
}
```

---

## Configuration Management

### Environment Configuration

#### Universal Environment Variables
```bash
# Application Configuration
APP_NAME=MyApplication
APP_VERSION=1.0.0
APP_ENVIRONMENT=development

# Database Configuration
DATABASE_URL=connection_string_here
DATABASE_POOL_SIZE=10

# API Configuration
API_BASE_URL=https://api.example.com
API_TIMEOUT=30000
API_RATE_LIMIT=100

# Security Configuration
JWT_SECRET=your_secret_key_here
ENCRYPTION_KEY=your_encryption_key_here

# External Services
THIRD_PARTY_API_KEY=your_api_key_here
LOGGING_SERVICE_URL=https://logs.example.com

# Platform-Specific Configuration
PLATFORM_SPECIFIC_CONFIG=value
```

#### Platform-Specific Configuration

**Web Applications:**
```bash
# Frontend Configuration
REACT_APP_API_URL=https://api.example.com
NEXT_PUBLIC_ANALYTICS_ID=analytics_id_here
VITE_APP_TITLE=My App

# Build Configuration
BUILD_PATH=dist
PUBLIC_URL=/
GENERATE_SOURCEMAP=true
```

**Mobile Applications:**
```bash
# iOS Configuration
IOS_BUNDLE_ID=com.company.app
IOS_TEAM_ID=team_id_here
IOS_PROVISIONING_PROFILE=profile_name

# Android Configuration
ANDROID_PACKAGE_NAME=com.company.app
ANDROID_KEYSTORE_PATH=path/to/keystore
ANDROID_KEY_ALIAS=key_alias
```

**Backend Services:**
```bash
# Server Configuration
PORT=3000
HOST=0.0.0.0
NODE_ENV=production

# Database Configuration
DB_HOST=localhost
DB_PORT=5432
DB_NAME=myapp
DB_USER=username
DB_PASSWORD=password

# Cache Configuration
REDIS_URL=redis://localhost:6379
CACHE_TTL=3600
```

### Configuration File Patterns

#### JSON Configuration
```json
{
  "app": {
    "name": "MyApplication",
    "version": "1.0.0",
    "environment": "development"
  },
  "database": {
    "host": "localhost",
    "port": 5432,
    "name": "myapp"
  },
  "api": {
    "baseUrl": "https://api.example.com",
    "timeout": 30000,
    "rateLimit": 100
  }
}
```

#### YAML Configuration
```yaml
app:
  name: MyApplication
  version: 1.0.0
  environment: development

database:
  host: localhost
  port: 5432
  name: myapp

api:
  baseUrl: https://api.example.com
  timeout: 30000
  rateLimit: 100
```

#### Platform-Specific Configuration Files
- **Web**: `vite.config.ts`, `next.config.js`, `webpack.config.js`
- **Mobile**: `Info.plist` (iOS), `AndroidManifest.xml` (Android)
- **Backend**: `server.config.js`, `database.config.js`
- **Desktop**: `app.config.json`, `settings.ini`

---

## Import and Export Patterns

### Universal Import Patterns

#### Barrel Exports
```javascript
// src/components/index.js
export { Button } from './Button';
export { Input } from './Input';
export { Modal } from './Modal';

// Usage
import { Button, Input, Modal } from '@/components';
```

#### Feature-Based Exports
```javascript
// src/features/auth/index.js
export { LoginForm } from './components/LoginForm';
export { useAuth } from './hooks/useAuth';
export { authService } from './services/authService';
```

#### Type Exports
```typescript
// src/types/index.ts
export * from './user';
export * from './api';
export * from './common';
```

### Platform-Specific Import Patterns

#### JavaScript/TypeScript
```javascript
// External libraries
import React from 'react';
import axios from 'axios';

// Internal modules (absolute imports)
import { Button } from '@/components';
import { useAuth } from '@/hooks';

// Relative imports
import './styles.css';
import { helper } from '../utils/helper';

// Type imports (separate)
import type { User } from '@/types';
```

#### Python
```python
# Standard library
import os
import json
from datetime import datetime

# Third-party packages
import requests
from flask import Flask

# Local modules
from .models import User
from .services import UserService
from ..utils import helper_function
```

#### Java
```java
// Standard library
import java.util.List;
import java.util.ArrayList;

// Third-party libraries
import org.springframework.stereotype.Service;

// Local packages
import com.company.app.models.User;
import com.company.app.services.UserService;
```

#### Swift
```swift
// System frameworks
import Foundation
import UIKit

// Third-party libraries
import Alamofire

// Local modules
import Models
import Services
```

---

## Quality Standards

### File Organization Principles
- **Logical Grouping**: Related files grouped together
- **Consistent Naming**: Follow established naming conventions
- **Appropriate Granularity**: Files neither too large nor too small
- **Clear Separation**: Different concerns in different files/directories
- **Platform Conventions**: Follow platform-specific organization patterns

### Documentation Quality Standards
- **Completeness**: All major features and APIs documented
- **Accuracy**: Documentation matches actual implementation
- **Clarity**: Clear, understandable language
- **Examples**: Practical examples for complex concepts
- **Maintenance**: Documentation updated with code changes

### Requirements Quality Standards
- **Testability**: All requirements can be validated
- **Completeness**: All user needs addressed
- **Consistency**: No conflicting requirements
- **Traceability**: Clear links between requirements and implementation
- **EARS Compliance**: Proper use of EARS format

### Configuration Quality Standards
- **Security**: No secrets in version control
- **Environment Separation**: Clear separation between environments
- **Documentation**: Configuration options documented
- **Validation**: Configuration validated at startup
- **Defaults**: Sensible default values provided

---

## Maintenance Guidelines

### Regular Maintenance Tasks

#### Weekly Tasks
- [ ] Review and update documentation for recent changes
- [ ] Check for broken links in documentation
- [ ] Validate configuration files
- [ ] Review and clean up temporary files

#### Monthly Tasks
- [ ] Comprehensive documentation review
- [ ] Update project dependencies
- [ ] Review and update README files
- [ ] Audit file organization and naming consistency

#### Quarterly Tasks
- [ ] Major documentation restructuring if needed
- [ ] Review and update project structure
- [ ] Evaluate and update development tools
- [ ] Comprehensive requirements and design review

### Change Management Process

#### Documentation Updates
1. **Identify Changes**: Determine what documentation needs updating
2. **Update Content**: Make necessary changes to documentation
3. **Review Changes**: Have changes reviewed by team members
4. **Validate Links**: Ensure all links and references work
5. **Communicate Changes**: Notify team of documentation updates

#### Structure Changes
1. **Plan Changes**: Design new structure or organization
2. **Impact Assessment**: Evaluate impact on existing work
3. **Migration Plan**: Create plan for transitioning to new structure
4. **Execute Changes**: Implement structural changes
5. **Update References**: Update all references to moved/renamed items
6. **Validate**: Ensure everything works with new structure

### Quality Assurance

#### Documentation Quality Checks
- [ ] All links work correctly
- [ ] Code examples are current and functional
- [ ] Screenshots and diagrams are up to date
- [ ] Spelling and grammar are correct
- [ ] Information is accurate and complete

#### Structure Quality Checks
- [ ] File naming follows conventions
- [ ] Directory structure is logical
- [ ] No duplicate or redundant files
- [ ] All files have clear purpose
- [ ] Platform conventions are followed

#### Requirements Quality Checks
- [ ] All requirements use proper EARS format
- [ ] Requirements are testable and measurable
- [ ] No conflicting or duplicate requirements
- [ ] All requirements have unique IDs
- [ ] Requirements trace to design and tasks

This comprehensive project organization guide provides universal principles and platform-specific guidance for maintaining well-structured, documented, and maintainable projects across any technology stack or platform.